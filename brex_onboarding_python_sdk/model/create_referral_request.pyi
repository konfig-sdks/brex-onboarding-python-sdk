# coding: utf-8

"""
    Onboarding API

     The onboarding API allows you to refer your customers and personal contacts to Brex. 

    The version of the OpenAPI document: 1.0
    Contact: developer-access@brex.com
    Created by: https://brex.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from brex_onboarding_python_sdk import schemas  # noqa: F401


class CreateReferralRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Submit a new referral to Brex for onboarding.
    """


    class MetaOapg:
        required = {
            "referral_code",
            "applicant",
        }
        
        class properties:
            referral_code = schemas.StrSchema
        
            @staticmethod
            def applicant() -> typing.Type['Applicant']:
                return Applicant
            
            
            class business(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            Business,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'business':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class contact_preference(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            ContactPreference,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'contact_preference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "referral_code": referral_code,
                "applicant": applicant,
                "business": business,
                "contact_preference": contact_preference,
            }
    
    referral_code: MetaOapg.properties.referral_code
    applicant: 'Applicant'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referral_code"]) -> MetaOapg.properties.referral_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicant"]) -> 'Applicant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business"]) -> MetaOapg.properties.business: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_preference"]) -> MetaOapg.properties.contact_preference: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["referral_code", "applicant", "business", "contact_preference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referral_code"]) -> MetaOapg.properties.referral_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicant"]) -> 'Applicant': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business"]) -> typing.Union[MetaOapg.properties.business, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_preference"]) -> typing.Union[MetaOapg.properties.contact_preference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["referral_code", "applicant", "business", "contact_preference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        referral_code: typing.Union[MetaOapg.properties.referral_code, str, ],
        applicant: 'Applicant',
        business: typing.Union[MetaOapg.properties.business, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        contact_preference: typing.Union[MetaOapg.properties.contact_preference, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateReferralRequest':
        return super().__new__(
            cls,
            *args,
            referral_code=referral_code,
            applicant=applicant,
            business=business,
            contact_preference=contact_preference,
            _configuration=_configuration,
            **kwargs,
        )

from brex_onboarding_python_sdk.model.applicant import Applicant
from brex_onboarding_python_sdk.model.business import Business
from brex_onboarding_python_sdk.model.contact_preference import ContactPreference
