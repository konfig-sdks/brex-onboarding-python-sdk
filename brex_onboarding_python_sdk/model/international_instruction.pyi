# coding: utf-8

"""
    Onboarding API

     The onboarding API allows you to refer your customers and personal contacts to Brex. 

    The version of the OpenAPI document: 1.0
    Contact: developer-access@brex.com
    Created by: https://brex.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from brex_onboarding_python_sdk import schemas  # noqa: F401


class InternationalInstruction(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    International wire instructions.
    """


    class MetaOapg:
        required = {
            "beneficiary_name",
            "account_type",
            "special_instructions",
            "beneficiary_address",
            "swift_bank_number",
            "bank_address",
            "bank_name",
            "swift_account_number",
        }
        
        class properties:
            account_type = schemas.StrSchema
            swift_account_number = schemas.StrSchema
            swift_bank_number = schemas.StrSchema
            beneficiary_name = schemas.StrSchema
            beneficiary_address = schemas.StrSchema
            bank_name = schemas.StrSchema
            bank_address = schemas.StrSchema
            special_instructions = schemas.StrSchema
            __annotations__ = {
                "account_type": account_type,
                "swift_account_number": swift_account_number,
                "swift_bank_number": swift_bank_number,
                "beneficiary_name": beneficiary_name,
                "beneficiary_address": beneficiary_address,
                "bank_name": bank_name,
                "bank_address": bank_address,
                "special_instructions": special_instructions,
            }
    
    beneficiary_name: MetaOapg.properties.beneficiary_name
    account_type: MetaOapg.properties.account_type
    special_instructions: MetaOapg.properties.special_instructions
    beneficiary_address: MetaOapg.properties.beneficiary_address
    swift_bank_number: MetaOapg.properties.swift_bank_number
    bank_address: MetaOapg.properties.bank_address
    bank_name: MetaOapg.properties.bank_name
    swift_account_number: MetaOapg.properties.swift_account_number
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swift_account_number"]) -> MetaOapg.properties.swift_account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swift_bank_number"]) -> MetaOapg.properties.swift_bank_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiary_name"]) -> MetaOapg.properties.beneficiary_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiary_address"]) -> MetaOapg.properties.beneficiary_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_address"]) -> MetaOapg.properties.bank_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["special_instructions"]) -> MetaOapg.properties.special_instructions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_type", "swift_account_number", "swift_bank_number", "beneficiary_name", "beneficiary_address", "bank_name", "bank_address", "special_instructions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> MetaOapg.properties.account_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swift_account_number"]) -> MetaOapg.properties.swift_account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swift_bank_number"]) -> MetaOapg.properties.swift_bank_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiary_name"]) -> MetaOapg.properties.beneficiary_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiary_address"]) -> MetaOapg.properties.beneficiary_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_name"]) -> MetaOapg.properties.bank_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_address"]) -> MetaOapg.properties.bank_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["special_instructions"]) -> MetaOapg.properties.special_instructions: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_type", "swift_account_number", "swift_bank_number", "beneficiary_name", "beneficiary_address", "bank_name", "bank_address", "special_instructions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beneficiary_name: typing.Union[MetaOapg.properties.beneficiary_name, str, ],
        account_type: typing.Union[MetaOapg.properties.account_type, str, ],
        special_instructions: typing.Union[MetaOapg.properties.special_instructions, str, ],
        beneficiary_address: typing.Union[MetaOapg.properties.beneficiary_address, str, ],
        swift_bank_number: typing.Union[MetaOapg.properties.swift_bank_number, str, ],
        bank_address: typing.Union[MetaOapg.properties.bank_address, str, ],
        bank_name: typing.Union[MetaOapg.properties.bank_name, str, ],
        swift_account_number: typing.Union[MetaOapg.properties.swift_account_number, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InternationalInstruction':
        return super().__new__(
            cls,
            *args,
            beneficiary_name=beneficiary_name,
            account_type=account_type,
            special_instructions=special_instructions,
            beneficiary_address=beneficiary_address,
            swift_bank_number=swift_bank_number,
            bank_address=bank_address,
            bank_name=bank_name,
            swift_account_number=swift_account_number,
            _configuration=_configuration,
            **kwargs,
        )
